{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Language and Environment */
    "target": "ES2022" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      "DOM",
      "DOM.Iterable",
      "ES2022"
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    "useDefineForClassFields": true /* Emit ECMAScript-standard-compliant class fields. */,
    "moduleDetection": "force" /* Control what method is used to detect module-format JS files. */,

    /* Modules */
    "module": "node16" /* Specify what module code is generated. */,
    "moduleResolution": "node16" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "resolveJsonModule": false /* Enable importing .json files. */,

    /* Emit */
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "outDir": "./dist" /* Specify an output folder for all emitted files. */,
    "newLine": "lf" /* Set the newline character for emitting files. */,
    "stripInternal": true /* Disable emitting declarations that have '@internal' in their JSDoc comments. */,
    "noEmitOnError": true /* Disable emitting files if any type checking errors are reported. */,

    /* Interop Constraints */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    "noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
    "noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
    "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
    "noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index. */,
    "noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
    "noPropertyAccessFromIndexSignature": true /* Enforces using indexed accessors for keys declared using an indexed type. */,

    /* Completeness */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}
